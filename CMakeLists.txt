project (jiffyjson)
cmake_minimum_required(VERSION 2.8)

file(GLOB LIB_SOURCES src/*.c)
set(COMMON_FLAGS "-ggdb3 -march=native -Wall")

option(DEBUG "debug" OFF)
if(DEBUG)
    set(COMMON_FLAGS "${COMMON_FLAGS} -O0")
else(DEBUG)
    set(COMMON_FLAGS "${COMMON_FLAGS} -Ofast -DNDEBUG -DJIFFY_MEMCHR_SSE2")
endif(DEBUG)

option(PERFTEST "performance test" OFF)
if(PERFTEST)
    set(COMMON_FLAGS "${COMMON_FLAGS} -fno-inline -fno-omit-frame-pointer -DPERFTEST")
else(PERFTEST)
    if(NOT DEBUG)
        if(CMAKE_COMPILER_IS_GNUCC)
            # because of missing -flto support before 4.8
            if (CMAKE_CXX_COMPILER_VERSION VERSION_LESS 4.8)
                message(FATAL_ERROR "GCC version must be at least 4.8!")
            endif()

            set(COMMON_FLAGS "${COMMON_FLAGS} -flto")
            find_program(GCC_AR "gcc-ar")
            find_program(GCC_RANLIB "gcc-ranlib")
            if(NOT (GCC_AR AND GCC_RANLIB))
                message(FATAL_ERROR "can't find gcc-ar and gcc-ranlib")
            endif()
            set(CMAKE_AR "gcc-ar")
            set(CMAKE_RANLIB "gcc-ranlib")
        endif(CMAKE_COMPILER_IS_GNUCC)
    endif(NOT DEBUG)
endif(PERFTEST)

option(COVERAGE "measure code coverage" OFF)
if(COVERAGE)
    set(COMMON_FLAGS "${COMMON_FLAGS} --coverage")
endif(COVERAGE)

option(TEST "build unittests" OFF)
if(TEST)
    set(COMMON_FLAGS "${COMMON_FLAGS} -DUNITTEST")
    add_subdirectory(test)
    include(CTest)
endif(TEST)

set(CMAKE_C_FLAGS "${COMMON_FLAGS} -std=gnu11 -Werror -Wextra")
include_directories(include)
add_library(jiffyjson ${LIB_SOURCES})

add_subdirectory(perftest)
